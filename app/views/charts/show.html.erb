<%= render 'select_options' %>

<div id="mychart"></div>
<script type="text/javascript">
    <%
      ohlc_data = []
      @quotes.each do |quote|
              ohlc_data << [quote.date, quote.open.to_f, quote.high.to_f, quote.low.to_f, quote.close.to_f]
      end
      min_date = @quotes.first.date - 3
      max_date = @quotes.last.date + 3
    %>

    var height = 650, width = 1300, margin = 50;
    var data = <%=raw ohlc_data.to_json %>;
    var stDate = new Date("<%=min_date%>"), enDate = new Date("<%=max_date%>");
    var ymin = d3.min(data, function (d) {
        return d[3]
    }), ymax = d3.max(data, function (d) {
        return d[2]
    });
    var xscale = d3.time.scale()
            .domain([stDate, enDate])
            .range([1, width - margin]);

    var yscale = d3.scale.linear()
            .domain([ymin, ymax])
            .range([height - margin, 0]);

    var svg = d3.select("#mychart").append("svg").attr("height", height).attr("width", width);

    var dateFormat = d3.time.format("%Y-%m-%d");
    var xaxis = d3.svg.axis().scale(xscale).orient("bottom").tickFormat(dateFormat);
    xaxis.tickSize(-width + 1);
    svg.append("g").attr("transform", "translate(" + (margin - 1) + "," + (height - margin) + ")").attr("class", "axis").call(xaxis);

    var yaxis = d3.svg.axis().scale(yscale).orient("left").tickSize(-xscale.range()[1] + 1);
    svg.append("g").attr("transform", "translate(" + margin + ", 0)").attr("class", "axis").call(yaxis);

    var g = svg.append("g");
    var text = g.append("text").attr("x", xscale(enDate) - 150).attr("y", yscale(ymax) + 15);
    var previousClose = 0;
    data.forEach(function (d) {
        var color = d[4] > previousClose ? "green" : "red";
        var date = new Date(d[0]);
        g.append("line").attr("class", color).attr("x1", xscale(date) - 3).attr("x2", xscale(date)).attr("y1", yscale(d[1])).attr("y2", yscale(d[1]));//.append("svg:title").text("abcd");
        g.append("line").attr("class", color).attr("x1", xscale(date)).attr("x2", xscale(date)).attr("y1", yscale(d[2])).attr("y2", yscale(d[3]));//.append("svg:title").text("abcd");
        g.append("line").attr("class", color).attr("x1", xscale(date)).attr("x2", xscale(date) + 3).attr("y1", yscale(d[4])).attr("y2", yscale(d[4]));//.append("svg:title").text("abcd");
        previousClose = d[4];
    });

    g.attr("transform", "translate(" + margin + ", 0)");

    var xCursor, yCursor;
    function drawCursorMarker(xy, x, y) {
        if (xCursor == null) {
            xCursor = g.append("line").attr("class", "cursor_axis");
            yCursor = g.append("line").attr("class", "cursor_axis");
        }
        if ((xy[0] - margin) > 0 && (height - xy[1] - margin) > 0) {
            xCursor.attr("x1", xy[0] - margin).attr("x2", xy[0] - margin).attr("y1", yscale(ymin)).attr("y2", yscale(ymax));
            yCursor.attr("x1", xscale(stDate)).attr("x2", xscale(enDate)).attr("y1", xy[1]).attr("y2", xy[1]);
        }
        text.text(x + " " + new Number(y).toFixed(2));
    }

    svg.on("mousemove", function () {
        var xy = d3.mouse(this), x = dateFormat(xscale.invert(xy[0])), y = yscale.invert(xy[1]);
        drawCursorMarker(xy, x, y);
    });
    g.on("mousemove", function () {
        var xy = d3.mouse(this), x = dateFormat(xscale.invert(xy[0])), y = yscale.invert(xy[1]);
        drawCursorMarker(xy, x, y);
    });
    svg.on("mouseout", function () {
        g.selectAll('.cursor_axis').attr("x1", -1).attr("x2", -1).attr("y1", -1).attr("y2", -1);
    });
</script>
